// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef CEPHEIPREFS_SWIFT_H
#define CEPHEIPREFS_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import MessageUI;
@import ObjectiveC;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CepheiPrefs",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class PSSpecifier;

@interface HBAboutListController (SWIFT_EXTENSION(CepheiPrefs))
@property (nonatomic, readonly, copy) NSString * _Nullable hb_specifierPlist;
/// The email address to use in the support email composer form. Override this method to return an
/// email address.
/// If this method returns nil, the package’s author email address is used.
///
/// returns:
/// By default, nil.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nullable hb_supportEmailAddress;)
+ (NSString * _Nullable)hb_supportEmailAddress SWIFT_WARN_UNUSED_RESULT;
/// The email address to use in the support email composer form. Override this method to return an
/// email address.
/// If this method returns nil, the package’s author email address is used.
///
/// returns:
/// By default, nil.
@property (nonatomic, readonly, copy) NSString * _Nullable hb_supportEmailAddress;
/// Displays a support composer form.
/// The <code>-hb_supportEmailAddress</code> method provides the appropriate parameters to
/// <code>HBSupportController</code>.
/// <ul>
///   <li>
///     see: <code>HBSupportController</code>
///   </li>
/// </ul>
- (void)hb_sendSupportEmail;
/// Displays a support composer form.
/// The <code>-hb_supportEmailAddress</code> method provides the appropriate parameters to
/// <code>HBSupportController</code>.
/// <ul>
///   <li>
///     see: <code>HBSupportController</code>
///   </li>
/// </ul>
- (void)hb_sendSupportEmail:(PSSpecifier * _Nullable)sender;
@end

@class UIColor;
enum HBAppearanceSettingsLargeTitleStyle : NSUInteger;

/// The HBAppearanceSettings class in CepheiPrefs provides a model object read by other components
/// of Cephei to determine colors and other appearence settings to use in the user interface.
/// Appearance settings are typically set on a view controller, via the
/// <code>-[PSListController(HBTintAdditions) hb_appearanceSettings]</code> property. This is automatically
/// managed by Cephei and provided to view controllers as they are pushed onto the stack.
/// Most commonly, the API will be used by setting the <code>hb_appearanceSettings</code> property from the
/// init method. The following example sets the tint color, table view background color, and
/// customises the navigation bar with a background, title, and status bar color:
/// \code
/// init() {
/// 	super.init()
///
/// 	let appearanceSettings = AppearanceSettings()
/// 	appearanceSettings.tintColor = UIColor(red: 66 / 255, green: 105 / 255, blue: 154 / 255, alpha: 1)
/// 	appearanceSettings.barTintColor = .systemRed
/// 	appearanceSettings.navigationBarTitleColor = .white
/// 	appearanceSettings.tableViewBackgroundColor = UIColor(white: 242 / 255, alpha: 1)
/// 	appearanceSettings.statusBarStyle = .lightContent
/// 	self.appearanceSettings = appearanceSettings
/// }
///
/// \endcode\code
/// - (instancetype)init {
/// 	self = [super init];
///
/// 	if (self) {
/// 		HBAppearanceSettings *appearanceSettings = [[HBAppearanceSettings alloc] init];
/// 		appearanceSettings.tintColor = [UIColor colorWithRed:66.f / 255.f green:105.f / 255.f blue:154.f / 255.f alpha:1];
/// 		appearanceSettings.barTintColor = [UIColor systemRedColor];
/// 		appearanceSettings.navigationBarTitleColor = [UIColor whiteColor];
/// 		appearanceSettings.tableViewBackgroundColor = [UIColor colorWithWhite:242.f / 255.f alpha:1];
/// 		appearanceSettings.statusBarStyle = UIStatusBarStyleLightContent;
/// 		self.hb_appearanceSettings = appearanceSettings;
/// 	}
///
/// 	return self;
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("AppearanceSettings")
@interface HBAppearanceSettings : NSObject
/// The tint color to use for interactable elements within the list controller. Set this property to
/// a UIColor to use.
/// A nil value will cause no modification of the tint to occur.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// The user interface style to use. Set this property to a UIUserInterfaceStyle to use.
///
/// returns:
/// By default, UIUserInterfaceStyleUnspecified.
@property (nonatomic) UIUserInterfaceStyle userInterfaceStyle;
/// The tint color to use for the navigation bar buttons, or, if invertedNavigationBar is set, the
/// background of the navigation bar. Set this property to a UIColor to use, if you don’t want to
/// use the same color as tintColor.
/// A nil value will cause no modification of the navigation bar tint to occur.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable navigationBarTintColor;
/// The color to use for the navigation bar title label. Set this property to a UIColor to use.
/// A nil value will cause no modification of the navigation bar title color to occur.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable navigationBarTitleColor;
/// The background color to use for the navigation bar. Set this property to a UIColor to use.
/// A nil value will cause no modification of the navigation bar background to occur.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable navigationBarBackgroundColor;
/// The status bar style to use. Set this property to a UIStatusBarStyle to use.
///
/// returns:
/// By default, UIStatusBarStyleDefault.
@property (nonatomic) UIStatusBarStyle statusBarStyle;
/// Whether to show the shadow (separator line) at the bottom of the navigation bar.
/// Requires iOS 13 or later.
///
/// returns:
/// By default, YES.
@property (nonatomic) BOOL showsNavigationBarShadow;
/// Whether to use a large title on iOS 11 and newer. Set this property to a value from
/// HBAppearanceSettingsLargeTitleStyle.
///
/// returns:
/// By default, HBAppearanceSettingsLargeTitleStyleRootOnly.
@property (nonatomic) enum HBAppearanceSettingsLargeTitleStyle largeTitleStyle;
/// The color to be used for the overall background of the table view. Set this property to a
/// UIColor to use.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable tableViewBackgroundColor;
/// The color to be used for the text color of table view cells. Set this property to a UIColor to
/// use.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable tableViewCellTextColor;
/// The color to be used for the background color of table view cells. Set this property to a
/// UIColor to use.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable tableViewCellBackgroundColor;
/// The color to be used for the separator between table view cells. Set this property to a UIColor
/// to use.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable tableViewCellSeparatorColor;
/// The color to be used when a table view cell is selected. This color will be shown when the cell
/// is in the highlighted state.
///
/// returns:
/// By default, nil.
@property (nonatomic, strong) UIColor * _Nullable tableViewCellSelectionColor;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Constants indicating how to size the title of this item.
typedef SWIFT_ENUM_NAMED(NSUInteger, HBAppearanceSettingsLargeTitleStyle, "LargeTitleStyle", open) {
/// Display a large title only when the current view controller is a subclass of
/// <code>HBRootListController</code>.
/// This is the default mode.
  HBAppearanceSettingsLargeTitleStyleRootOnly = 0,
/// Always display a large title.
  HBAppearanceSettingsLargeTitleStyleAlways = 1,
/// Never display a large title.
  HBAppearanceSettingsLargeTitleStyleNever = 2,
};


@interface HBAppearanceSettings (SWIFT_EXTENSION(CepheiPrefs)) <NSCopying>
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end

@class NSData;
@class NSCoder;
@class NSBundle;

SWIFT_CLASS_NAMED("ContactViewController")
@interface HBContactViewController : HBListController
@property (nonatomic, copy) NSString * _Nullable to;
@property (nonatomic, copy) NSString * _Nullable subject;
@property (nonatomic, copy) NSString * _Nullable messageBody;
@property (nonatomic, copy) NSData * _Nullable preferencesPlist;
@property (nonatomic, copy) NSString * _Nullable preferencesIdentifier;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (null_unspecified instancetype)initForContentSize:(CGSize)contentSize SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class MFMailComposeViewController;

@interface HBContactViewController (SWIFT_EXTENSION(CepheiPrefs)) <MFMailComposeViewControllerDelegate>
- (void)mailComposeController:(MFMailComposeViewController * _Nonnull)controller didFinishWithResult:(MFMailComposeResult)result error:(NSError * _Nullable)error;
@end


@interface HBListController (SWIFT_EXTENSION(CepheiPrefs))
/// Specifier action to perform a restart of the system app (respring).
/// You should prefer to have preferences immediately take effect, rather than using this method.
/// <ul>
///   <li>
///     see: <code>-hb_respringAndReturn:</code>
///   </li>
/// </ul>
- (void)hb_respring:(PSSpecifier * _Nullable)specifier;
/// Specifier action to perform a restart of the system app (respring), and return to the current
/// preferences screen.
/// You should prefer to have preferences immediately take effect, rather than using this method.
/// <ul>
///   <li>
///     see: <code>-hb_respring:</code>
///   </li>
/// </ul>
- (void)hb_respringAndReturn:(PSSpecifier * _Nullable)specifier;
/// Specifier action to open the URL specified by the specifier.
/// This is intended to be used with <code>HBLinkTableCell</code>.
/// <ul>
///   <li>
///     see: <code>HBLinkTableCell</code>
///   </li>
/// </ul>
- (void)hb_openURL:(PSSpecifier * _Nullable)specifier;
/// Specifier action to open the package specified by the specifier.
/// This is intended to be used with <code>HBPackageTableCell</code>.
/// <ul>
///   <li>
///     see: <code>HBPackageTableCell</code>
///   </li>
/// </ul>
- (void)hb_openPackage:(PSSpecifier * _Nullable)specifier;
/// Specifier action to open the Mastodon account specified by the specifier.
/// This is intended to be used with <code>HBMastodonTableCell</code>.
/// <ul>
///   <li>
///     see: <code>HBMastodonTableCell</code>
///   </li>
/// </ul>
- (void)hb_openMastodon:(PSSpecifier * _Nullable)specifier;
@end

@class NSMutableArray;
@class PSListController;

@interface HBListController (SWIFT_EXTENSION(CepheiPrefs))
@property (nonatomic, strong) NSMutableArray * _Nullable specifiers;
- (NSMutableArray * _Nullable)loadSpecifiersFromPlistName:(NSString * _Nonnull)name target:(PSListController * _Nullable)target SWIFT_WARN_UNUSED_RESULT;
- (NSMutableArray * _Nullable)loadSpecifiersFromPlistName:(NSString * _Nonnull)name target:(PSListController * _Nullable)target bundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
@end

@protocol HBMastodonAPIClientDelegate;

SWIFT_CLASS_NAMED("MastodonAPIClient")
@interface HBMastodonAPIClient : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) HBMastodonAPIClient * _Nonnull sharedInstance;)
+ (HBMastodonAPIClient * _Nonnull)sharedInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (void)queueLookupForAccount:(NSString * _Nonnull)account;
- (void)addDelegate:(id <HBMastodonAPIClientDelegate> _Nonnull)delegate forAccount:(NSString * _Nonnull)account;
- (void)removeDelegate:(id <HBMastodonAPIClientDelegate> _Nonnull)delegate forAccount:(NSString * _Nullable)account;
@end

@class NSURL;
@class UIImage;

SWIFT_PROTOCOL_NAMED("MastodonAPIClientDelegate")
@protocol HBMastodonAPIClientDelegate <NSObject>
- (void)mastodonAPIClientDidLoadWithAccount:(NSString * _Nonnull)account actualAccount:(NSString * _Nonnull)actualAccount url:(NSURL * _Nullable)url profileImage:(UIImage * _Nullable)profileImage;
@end





SWIFT_CLASS_NAMED("PackageUtils")
@interface HBPackageUtils : NSObject
+ (NSString * _Nonnull)shellEscape:(NSArray<NSString *> * _Nonnull)input SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nullable)getFields:(NSArray<NSString *> * _Nonnull)fields forPackage:(NSString * _Nonnull)package SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getField:(NSString * _Nonnull)field forPackage:(NSString * _Nonnull)package SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)resolvePackageForFile:(NSString * _Nonnull)file SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface HBRootListController (SWIFT_EXTENSION(CepheiPrefs))
- (void)loadView;
@end


/// The HBSpinnerTableCell class in CepheiPrefs displays an activity indicator when the cell is
/// disabled.
/// <h3>Example Usage</h3>
/// Specifier plist:
/// \code
/// <dict>
/// 	<key>action</key>
/// 	<string>doStuffTapped:</string>
/// 	<key>cell</key>
/// 	<string>PSButtonCell</string>
/// 	<key>cellClass</key>
/// 	<string>HBSpinnerTableCell</string>
/// 	<key>label</key>
/// 	<string>Do Stuff</string>
/// </dict>
///
/// \endcodeList controller implementation:
/// \code
/// @objc func doStuffTapped(_ specifier: PSSpecifier) {
/// 	guard let cell = cachedCell(for: specifier) else {
/// 		return
/// 	}
///
/// 	cell.cellEnabled = false
/// 	// Do something in the background…
/// 	cell.cellEnabled = true
/// }
///
/// \endcode\code
/// - (void)doStuffTapped:(PSSpecifier *)specifier {
/// 	PSTableCell *cell = [self cachedCellForSpecifier:specifier];
/// 	cell.cellEnabled = NO;
/// 	// Do something in the background…
/// 	cell.cellEnabled = YES;
/// }
///
/// \endcode
SWIFT_CLASS_NAMED("SpinnerTableCell")
@interface HBSpinnerTableCell : HBTintedTableCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier specifier:(PSSpecifier * _Nullable)specifier SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@property (nonatomic) BOOL cellEnabled;
@end


SWIFT_CLASS_NAMED("SymbolRenderer")
@interface HBSymbolRenderer : NSObject
+ (UIImage * _Nonnull)makeIconWithBackgroundColor:(UIColor * _Nonnull)backgroundColor isBig:(BOOL)isBig glyph:(UIImage * _Nullable)glyph SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
